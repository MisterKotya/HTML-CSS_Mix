Блочные элементы занимают всё доступное пространство по ширине:

    абзацы <р>
    списки: маркированные (с маркером) <ul> и нумерованные (с числами) <ol>
    заголовки: от первого уровня <h1> до шестого уровня <h6>
    статьи <article>
    разделы <section>
    длинные цитаты <blockquote>
    блоки общего назначения  <div>

Строчные элементы - ведут себя как текст - выстраиваются в ряд по горизонтали и переносятся на следующую строчку, если не хватает места:

    ссылки <a> - <a href="https://google.com">...</a>
    выделенные слова <em>
    важные слова <strong>
    короткие цитаты <q>
    аббревиатуры <abbr>

Атрибуты:

- тег <a> — ссылка. Для задания адреса, куда будет вести эта ссылка, нам понадобится атрибут href.
<a href="https://vk.com/itc.digital">ITC Вконтакте</a>

- атрибут target - при переходе по ссылке документ открывается в текущем окне или фрейме. Пример ссылки на страницу ITC, которая откроется в новой вкладке: "_blank" - Загружает страницу в новое окно браузера.
<a href="https://vk.com/itc.digital" target="_blank">ITC Вконтакте</a>

- У атрибута может не быть значения, тогда наличие атрибута включает какой-то параметр, а отсутствие - отключает. Например, атрибут disabled. Если кнопке <button> задать атрибут disabled, она станет серой и на неё невозможно будет нажать.
<button disabled>Нельзя нажимать</button>

В HTML существует три вида списков:

- Маркированный: Список из неупорядоченных элементов.
Состоит из двух тегов:
    <ul> (unordered list) - тег начала и конца списка
    <li> (list item) - пункт списка

- Нумерованный: Упорядоченный список, каждый пункт имеет свой номер.
Состоит из двух тегов:
    <ol> (ordered list) - тег начала и конца списка
    <li> (list item) - пункт списка

- Список определений: Используются для создания списка терминов и их определений.
Состоит из трёх тегов:
    <dl> (description list) - тег начала и конца списка
    <dt> (term) - термин
    <dd> (description) - определение


Изображения: <img> - одинарный тэг, его атрибуты: 

    src - ссылка на картинку﻿
    alt - текст, который отображается вместо картинки, если она не загрузилась
    title - текст, который отображается при наведении мыши на картинку
    width - ширина картинки в пикселях
    height - высота картинки в пикселях
figure и figcaption - теги для оформления объектов ﻿с подписями <></>

Ссылки и адреса:

- Абсолютные адреса: https://google.com/doodles or 
file:///C:/Users/admin/Desktop/Новая%20папка/image.jpg:

    https - так называемая «схема», обычно это название протокола. HTTPS - защищённая версия HTTP
    google.com - доменное имя сайта
    /doodles - путь (директория) внутри сайта

- Относительные адреса: сокращённый адрес: локально (то есть у тебя на устройстве)

    //google.com - ссылка на домен в текущем протоколе
    /sheets - ссылка на путь внутри текущего домена
    page2 - ссылка на путь внутри текущей директории

Якоря: 
Ссылки могут ссылаться не только на страницу, но ещё и на конкретное место на странице. Такие ссылки называются якорными, а места, на которые они ссылаются - якорями.

<h1 id="anchor">Якорь</h1>
<a href="#anchor">Перейти к якорю</a>
<a href="#"> - получаем возможность возврата в начало страницы - пустая якорь-ссылка

nav a {…} - /* выберет теги a внутри тегов nav */ - вложенные селекторы, для того, чтобы стилизовать тег nav, читаем справа налево
<nav class="blog-navigation"> </nav> - использование классов, для стилизации тега nav

CSS свойство box-sizing определяет как вычисляется общая ширина и высота элемента: content-box | border-box | padding-box | inherit.

Псевдоэлемент в CSS — это ключевое слово, добавляемое к селектору, которое позволяет стилизовать определённую часть выбранного элемента, for example ::first-line может быть использован для изменения шрифта первой строки абзаца.

.wrapper - обёртка или контейнер используется в CSS,  как блок для задания конкретной ширины определенной группы элементов страницы сайта, чтобы они не вылазили слева и справа за рамки

margin: 0 auto; - центр страницы задает

Flex - одномерные макеты

Св-во для контейнера:
              display: flex; - объявление флекса
              flex-direction - задаёт направление основной оси
              flex-wrap - обёртка, отвечает за перенос блоков на новую строку
              flex-flow - является сокращённым свойством для отдельных свойств flex-direction и flex-wrap
              justify-content - расположение элементов по горизонтали
              align-items - отвечает за вытягивание элементов              
              align-content - растягивание элементов по вертикали             
Св-во для элементов: 
              order - каждому отдельному элементу можно задать последовательность (число)
              flex-grow - отвечает за растягивание отдельного элемента (число)
              flex-shrink - даёт возможность указать какой элемент можно сжать больше всего (число)
              flex-basis - аналог ширины и высоты, некий базовый размер
              flex - укороченная запись flex-grow, flex-shrink, flex-basis - например: 0 (flex-grow) 1 (flex-shrink) auto или 30% (flex-basis)
              align-self - отвечает за выравнивание отдельно взятого элемента  
              
Grid - создает столбцы(columns) и ряды(rows) считаем слева направо - двух мерные макеты

fr - фракция - это какая-то часть от всего контейнера
если нужно указать, к примеру 12 размеров, то пишим: repeat(12, 1fr) - 12(кол-во колонок) и 1 fr(размер колонки)

display: grid;
    grid-template-columns: 200px 50px 100px; - 3 колонки - это ширина
    grid-template-rows: 100px 30px; - 2 ряда - это высота
т.е. ширина второй колонки первого ряда 50px, а высота второй колонки первого ряда 100px
    grid-auto-rows: 100 px - происходит автозаполнение рядов(строк) по 100px
    grid-auto-rows:  minmax(100px, auto) - указывает минимальное значение строки и макс значение, к примеру auto
    grid-column-gap: 10px; - отступы между колонками, к примеру отступ 10px 
    = grid-gap: 10px 10 px; - это отступ сразу и между колонками и между рядами
    grid-column-gap: 5px; - отступы между строками, к примеру 5px
Выравнивание контейнеров:
    выравнивание по горизонтали justify-content(start, center. end), выравнивание по вертикали align-content
    align-items(start, center. end) - выравнивание относительно ячейки по оси y
    justify-items(start, center. end) - выравнивание относительно ячейки по оси x
Выравнивание элементов:
    align-self(start, center. end) - выравнивание относительно ячейки по оси y
    justify-self(start, center. end) - выравнивание относительно ячейки по оси x 
Можно изменять расположение элемента, посредством задавания номеров по горизонтали и вертикали данного элемента: ( Н-р:grid-column-start: 1; grid-column-end: 3; - выставляем элемент на место 1 по вертикали(колонка 1) и на место 3 по горизонтали(ряд 3))
   можно растягивать(где начинается и где заканчивается, таким образом растягивая границы элемента по вертикали и горизонтали)
    grid-column-start:1; to grid-column-end:3; сокращенно grid-column: 1/3;
    grid-row-start:2; to grid-row-end:5;       сокращенно grid-row: 2/5;  
Задаем шаблон в гриде для каждого из классов: grid-template-areas: 'header header' 'sidebar content'; потом задаем этим классам (header, sidebar, content) св-во grid-area: header; к примеру.

    .container {
    display: grid;
    grid-gap: 5px;    
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: 50px 350px 50px;
    grid-template-areas:
        "h h h h h h h h h h h h"
        "m m c c c c c c c c c c"
        "f f f f f f f f f f f f";
}
.header {
    grid-area: h;
}

.menu {
    grid-area: m;
}

.content {
    grid-area: c;
}

.footer {
   grid-area: f;
}
 
<div class="grid">...</div>
             
   Самые часто используемые псевдоклассы: - для изменения цвета кнопки при наведении курсора

    :hover - появляется при наведении мышки
    :active - появляется при нажатии на элемент
    :focus - появляется при фокусировке на элементе (например, когда выбрано поле ввода текста)


transition - Анимация объекта (эффект перехода)

div {
transition-property: height, width, background-color;    =  div {transition: background 0.3s ease, color 0.2s linear;}
transition-duration: 3s;
transition-timing-function: ease-in, ease, linear;
}

CSS-свойство opacity устанавливает непрозрачность элемента (от 0 до 1)

background-size: ( <значение> | <проценты> | auto ]{1,2} | cover | contain )

cover - Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.

@media - позволяет адаптировать код или фрагмент кода для различных типов устройств, таких как: принтеры, речевых браузеров, устройств Брайля, телевизоров и так далее.
Viewport - это видимая пользователю область веб-страницы, то, что может увидеть пользователь, не прибегая к прокрутке.
В @media можно указывать определённые типы устройств:
    all – для всех;
    print – для принтеров и в режиме предварительного просмотра страницы перед печатью;
    screen – для устройств с экранами;
    speech – для программ чтения с экрана.
Н-р: @media screen, print { ... } - адаптация для экранов и принтеров

и width или height позволяет задать условие на равенство ширины или высоты области просмотра определённому значению (min или max)
Для ширины или высоты больше - пишем min
Для ширины или высоты меньше - пишем max

.c1, .c2, .c6 {
  width: 100%; - это можно не писать, это как константа.
}
@media screen and (min-width: 992px) {
  .c2 { width:50%; }
  .c1 { width:33.3333%; } 
  }
@media screen and (min-width: 1200px) {
  .c2 { width:33.3333%; }
  .c1 { width:16.6666%; } 
  }

Адаптивная сетка в Фигме вычисляется при выборе Layout Grid(сетка) там и производится расчет через вычисление ск-ко колонок в сетке.

<div class="container">
    <div class="row">
        <div class="col-xs-6 col-md-4 col-lg-3">
            <div>Блок</div>
        </div>
</div>
</div>

xs(smartphone), sm, md(Tablet), lg(PC), xl - extra small, small, medium, large, extra large
container - контейнер сетки
row - ряд, строка сетки
col-**-* - колонки "col-", потом тип экрана "xs", для которого применяется значение и в конце "6" - количество колонок(квадратиков), которые займёт блок.